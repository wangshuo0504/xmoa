export USER_MEM_ARGS="-Xms1024m -Xmx2048m  -XX:PermSize=128M -XX:MaxPermSize=512M"


Dubbo服务化最佳实践                 
1.	分包：建议将服务接口，服务模型，服务异常等均放在API包中
2.  服务粒度：
	   （1）服务接口尽可能大粒度，每个服务方法应代表一个功能，而不是某功能、一个步骤，否则将面临分布式事务问题，Dubbo暂未提供分布式事务支持。
	   （2）服务接口建议以业务场景为单位划分，并对相近业务做抽象，防止接口数量爆炸
	   （3）不建议使用过于抽象的通用接口，如：Map query(Map)，这样的接口没有明确语义，会给后期维护带来不便。
3.	版本：每个接口都应定义版本号，为后续不兼容升级提供可能，如：<dubbo:service interface="com.xxx.XxxService" version="1.0" />
4.	兼容性：服务接口增加方法，或服务模型增加字段，可向后兼容，删除方法或删除字段，将不兼容，枚举类型新增字段也不兼容，需通过变更版本号升级。
5.	序列化：服务参数及返回值建议使用POJO对象，即通过set,get方法表示属性的对象。服务参数及返回值都必需是byValue的，而不能是byRef的，消费方和提供方的参数或返回值引用并不是同一个，只是值相同，Dubbo不支持引用远程对象。
      dubbo默认使用的hessian序列化有一些bug，参数应遵循如下原则：              
                      （1）  请求参数和响应参数bean不要extends集合类（如ArrayList).
                      （2. 请求参数和响应参数bean最好不要和父类有相同的属性
6.	异常：
	（1）建议使用异常汇报错误，而不是返回错误码，异常信息能携带更多信息，以及语义更友好
	（2）如果担心性能问题，在必要时，可以通过override掉异常类的fillInStackTrace()方法为空方法，使其不拷贝栈信息，
	（3）查询方法不建议抛出checked异常，否则调用方在查询时将过多的try...catch，并且不能进行有效处理，
	（4）服务提供方不应将DAO或SQL等异常抛给消费方，应在服务实现中对消费方不关心的异常进行包装，否则可能出现消费方无法反序列化相应异常。
                 